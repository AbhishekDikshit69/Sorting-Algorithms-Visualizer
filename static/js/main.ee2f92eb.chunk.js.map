{"version":3,"sources":["SortingAlgorithms.js","Navbar.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","heapify","arr","n","largest","l","r","swap","Navbar","className","onClick","this","props","mergeSort","quickSort","bubbleSort","heapSort","insertionSort","style","position","display","color","marginLeft","justifyContent","marginTop","defaultValue","min","max","step","onAfterChange","level","handleChange","resetArray","Component","SortingVisualizer","state","completed","action","width","currwidth","currlength","setState","randomIntFromInterval","ANIMATION_SPEED_MS","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","newHeight","height","generateAnimation","getQuickSortAnimations","low","high","quickanimations","pi","pivot","temp","partition","console","log","getHeapSortAnimations","getBubbleSortAnimations","key","getInsertionSortAnimations","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","class","bind","map","value","idx","status","React","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,EAmLP,SAASgB,EAAQC,EAAIC,EAAEN,EAAEZ,GAErB,IAAImB,EAAUP,EACVQ,EAAI,EAAER,EAAI,EACVS,EAAI,EAAET,EAAI,EAWd,GARIQ,EAAIF,GAAKD,EAAIG,GAAKH,EAAIE,KACtBA,EAAUC,GAGVC,EAAIH,GAAKD,EAAII,GAAKJ,EAAIE,KACtBA,EAAUE,GAGVF,IAAYP,EAChB,CACEZ,EAAWc,KAAK,CAACK,EAAQP,IACzBZ,EAAWc,KAAK,CAACF,EAAEO,IACnBnB,EAAWc,KAAK,CAACF,EAAEK,EAAIE,KACrB,IAAIG,EAAOL,EAAIL,GACfK,EAAIL,GAAKK,EAAIE,GACbF,EAAIE,GAAWG,EACftB,EAAWc,KAAK,CAACK,EAAQP,IAC3BZ,EAAWc,KAAK,CAACF,EAAEO,IACjBnB,EAAWc,KAAK,CAACK,EAAQG,IAEzBN,EAAQC,EAAKC,EAAGC,EAAQnB,I,wBC9MfuB,E,uKAEP,IAAD,OACL,OACI,4BAAQC,UAAU,UACd,6DAGA,yBAAKA,UAAU,mBACX,4BAAQC,QAASC,KAAKC,MAAMC,WAA5B,cACA,4BAAQH,QAASC,KAAKC,MAAME,WAA5B,cACA,4BAAQJ,QAASC,KAAKC,MAAMG,YAA5B,eACA,4BAAQL,QAASC,KAAKC,MAAMI,UAA5B,aACA,4BAAQN,QAASC,KAAKC,MAAMK,eAA5B,mBAEZ,yBAAKC,MAAO,CAACC,SAAS,WAAWC,QAAQ,eAAeC,MAAM,QAAQC,WAAW,MAAMC,eAAe,SAASC,UAAU,SAAzH,cAA8Ib,KAAKC,MAAM1B,QACjJ,yBAAKuB,UAAU,UACd,kBAAC,IAAD,CACDgB,aAAc,IACdC,IAAK,GACLC,IAAK,IACLC,KAAM,GACNC,cAAe,SAACC,GAAD,OAAS,EAAKlB,MAAMmB,aAAaD,OAGhD,4BAAQrB,UAAU,YAAYC,QAASC,KAAKC,MAAMoB,YAAlD,2B,GAzBoBC,aCOfC,G,yDACnB,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDuB,MAAQ,CACXnD,MAAO,GACP0C,IAAI,EACJC,IAAI,IACJzC,OAAO,IACPkD,WAAU,EACVC,QAAO,EACPC,MAAM,EACNC,UAAU,GAXK,E,gEAgBjB5B,KAAKqB,e,mCAGMQ,GACX,IAAID,EAAW,IAAIC,EAAY,EAC/B7B,KAAK8B,SAAS,CAACvD,OAAOsD,EAAWD,gB,mCAGjC5B,KAAK8B,SAAS,CAACH,MAAM3B,KAAKwB,MAAMI,YAEhC,IADA,IAAMvD,EAAQ,GACLa,EAAI,EAAGA,EAAIc,KAAKwB,MAAMjD,OAAQW,IACrCb,EAAMe,KAAK2C,EAAsB/B,KAAKwB,MAAMT,IAAKf,KAAKwB,MAAMR,MAE9DhB,KAAK8B,SAAS,CAACzD,MAAMA,EAAMoD,WAAU,EAAMC,QAAO,M,wCAGlCpD,EAAW0D,GAAoB,IAAD,OAC9ChC,KAAK8B,SAAS,CAACJ,QAAO,IACtB,IAF8C,eAErCxC,GACP,IAAM+C,EAAYC,SAASC,uBAAuB,aAElD,GADsBjD,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACVkD,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAW7B,MACnCgC,EAAcN,EAAUI,GAAW9B,MACnCG,EAAQxB,EAAI,IAAM,EA5CR,MAHF,YAgDdsD,YAAW,WACTF,EAAYG,gBAAkB/B,EAC9B6B,EAAYE,gBAAkB/B,IAC7BxB,EAAI8C,EAAmB,QAE1BQ,YAAW,WAAO,IAAD,cACgBlE,EAAWY,GAD3B,GACRkD,EADQ,KACGM,EADH,KAEKT,EAAUG,GAAW7B,MAC7BoC,OAAZ,UAAkC,IAAVD,EAAc,EAAKlB,MAAMR,IAAjD,KACK9B,IAAIZ,EAAWC,OAAO,GACxB,EAAKuD,SAAS,CAACL,WAAU,MAE3BvC,EAAI8C,EAAmB,IApBrB9C,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAyBT,IAAMZ,EAAaF,EAAuB4B,KAAKwB,MAAMnD,OACrD2B,KAAK4C,kBAAkBtE,EAAW,K,kCAIlC,IACMA,EFgEC,SAASuE,EAAuBtD,EAAIuD,EAAKC,EAAKC,GAEjD,GAAIF,EAAMC,EACV,CAGI,IAAIE,EAhDZ,SAAmB1D,EAAIuD,EAAIC,EAAKC,GAI5B,IAFA,IAAIE,EAAQ3D,EAAIwD,GACZ7D,EAAK4D,EAAI,EACJ3D,EAAE2D,EAAK3D,EAAE4D,EAAM5D,IAGpB,GAAII,EAAIJ,GAAK+D,EACb,CACIhE,IACA8D,EAAgB5D,KAAK,CAACF,EAAEC,IACtB6D,EAAgB5D,KAAK,CAACD,EAAED,IACxB8D,EAAgB5D,KAAK,CAACF,EAAEK,EAAIJ,KAE9B,IAAIgE,EAAO5D,EAAIL,GACfK,EAAIL,GAAKK,EAAIJ,GACbI,EAAIJ,GAAKgE,EACTH,EAAgB5D,KAAK,CAACF,EAAEC,IACtB6D,EAAgB5D,KAAK,CAACD,EAAED,IACxB8D,EAAgB5D,KAAK,CAACD,EAAEgE,IAKxBH,EAAgB5D,KAAK,CAACF,EAAE,EAAE6D,IAC1BC,EAAgB5D,KAAK,CAAC2D,EAAK7D,EAAE,IAC7B8D,EAAgB5D,KAAK,CAACF,EAAE,EAAEK,EAAIwD,KACxC,IAAII,EAAO5D,EAAIL,EAAE,GAOjB,OANAK,EAAIL,EAAE,GAAKK,EAAIwD,GACfxD,EAAIwD,GAAQI,EACFH,EAAgB5D,KAAK,CAACF,EAAE,EAAE6D,IAC1BC,EAAgB5D,KAAK,CAAC2D,EAAK7D,EAAE,IAC7B8D,EAAgB5D,KAAK,CAAC2D,EAAKI,IAE9BjE,EAAE,EAcIkE,CAAU7D,EAAKuD,EAAKC,EAAKC,GAIlCH,EAAuBtD,EAAKuD,EAAKG,EAAG,EAAED,GACtCH,EAAuBtD,EAAK0D,EAAG,EAAGF,EAAKC,GAE3C,OAAOA,EE7EMH,CAAuB7C,KAAKwB,MAAMnD,MAAM,EAAE2B,KAAKwB,MAAMjD,OAAO,EADnE,IAEVyB,KAAK4C,kBAAkBtE,EAAW,K,iCAIlC,IAAMA,EF0EA,SAA+BiB,GAKjC,IAJF,IAAIjB,EAAW,GACPkB,EAAID,EAAIhB,OAGLW,EAAIM,EAAI,EAAI,EAAGN,GAAK,EAAGA,IAC5BI,EAAQC,EAAKC,EAAGN,EAAEZ,GAGtB,IAAK,IAAIY,EAAEM,EAAE,EAAGN,EAAE,EAAGA,IACrB,CAAKZ,EAAWc,KAAK,CAAC,EAAEF,IACtBZ,EAAWc,KAAK,CAACF,EAAE,IACnBZ,EAAWc,KAAK,CAAC,EAAEG,EAAIL,KAErB,IAAIiE,EAAO5D,EAAI,GACfA,EAAI,GAAKA,EAAIL,GACbK,EAAIL,GAAKiE,EACT7E,EAAWc,KAAK,CAAC,EAAEF,IACrBZ,EAAWc,KAAK,CAACF,EAAE,IACnBZ,EAAWc,KAAK,CAACF,EAAEiE,IAEjB7D,EAAQC,EAAKL,EAAG,EAAEZ,GAGtB,OADA+E,QAAQC,IAAIhF,GACLA,EElGMiF,CAAsBvD,KAAKwB,MAAMnD,OAClD2B,KAAK4C,kBAAkBtE,EAAW,K,mCAIlC,IAAMA,EFVD,SAAiCiB,GAGlC,IAFJ,IAAMjB,EAAa,GACRkB,EAAID,EAAIhB,OACNW,EAAI,EAAGA,EAAIM,EAAE,EAAGN,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIK,EAAEN,EAAE,EAAGC,IACvB,GAAII,EAAIJ,GAAKI,EAAIJ,EAAE,GACnB,CACEb,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAEI,EAAIJ,EAAE,KAEvB,IAAIgE,EAAO5D,EAAIJ,GACfI,EAAIJ,GAAKI,EAAIJ,EAAE,GACfI,EAAIJ,EAAE,GAAKgE,EAEb7E,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEgE,IAE7B,OAAO7E,EETMkF,CAAwBxD,KAAKwB,MAAMnD,OACtD2B,KAAK4C,kBAAkBtE,EAAY,IAAI0B,KAAKwB,MAAMjD,OAAQ,M,sCAG1D,IAAMD,EF0HA,SAAoCiB,GAG1C,IAFC,IAAIjB,EAAW,GACVkB,EAAID,EAAIhB,OACLW,EAAI,EAAGA,EAAIM,IAAKN,EAAG,CAOxB,IANA,IAAIuE,EAAMlE,EAAIL,GACVC,EAAID,EAAI,EAKLC,GAAK,GAAKI,EAAIJ,GAAKsE,GACxBnF,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEI,EAAIJ,KACvBI,EAAIJ,EAAI,GAAKI,EAAIJ,GACjBA,GAAQ,EAEZb,EAAWc,KAAK,CAACD,EAAE,EAAED,IACnBZ,EAAWc,KAAK,CAACF,EAAEC,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEsE,IACvBlE,EAAIJ,EAAI,GAAKsE,EAEjB,OAAOnF,EEhJUoF,CAA2B1D,KAAKwB,MAAMnD,OACvD2B,KAAK4C,kBAAkBtE,EAAY,IAAI0B,KAAKwB,MAAMjD,OAAQ,M,8CAO1D,IAAK,IAAIW,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAG5B,IAFA,IAAMb,EAAQ,GACRE,EAASwD,EAAsB,EAAG,KAC/B7C,EAAI,EAAGA,EAAIX,EAAQW,IAC1Bb,EAAMe,KAAK2C,GAAuB,IAAM,MAE1C,IAAM4B,EAAwBtF,EAAMI,QAAQmF,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACzDC,EAAmB3F,EAAuBC,EAAMI,SACtD4E,QAAQC,IAAIU,EAAeL,EAAuBI,O,+BAIpD,OAAG/D,KAAKwB,MAAMC,WAAazB,KAAKwB,MAAME,OAC7B,yBAAK5B,UAAU,SAASS,MAAO,CAACG,MAAO,UAAvC,wBACCV,KAAKwB,MAAME,OACV,uBAAGuC,MAAM,gBAAgB1D,MAAO,CAACG,MAAM,YAAvC,sBAAsE,mCAAc,mCAAc,oCAErG,K,+BAEA,IAAD,OACArC,EAAS2B,KAAKwB,MAAdnD,MAEP,OAAQ,yBAAKyB,UAAU,QACf,kBAAC,EAAD,CAAQuB,WAAY,kBAAI,EAAKA,cAC5BnB,UAAW,kBAAM,EAAKA,aACrBE,WAAY,kBAAM,EAAKA,cACrBD,UAAW,kBAAM,EAAKA,aACrBE,SAAU,kBAAM,EAAKA,YACpBC,cAAe,kBAAI,EAAKA,iBACxBc,aAAcpB,KAAKoB,aAAa8C,KAAKlE,MACrCzB,OAAQyB,KAAKwB,MAAMjD,SACzB,yBAAKuB,UAAU,mBACdzB,EAAM8F,KAAI,SAACC,EAAOC,GAAR,OACb,yBACEvE,UAAU,YACV2D,IAAKY,EACL9D,MAAO,CACLkC,gBAlIQ,YAmIRE,OAAO,GAAD,OAAY,IAAPyB,EAAW,EAAK5C,MAAMR,IAA3B,KACNW,MAAM,GAAD,OAAI,EAAKH,MAAMG,MAAf,YAGX,6BAAM3B,KAAKsE,gB,GAlI4BC,IAAMjD,YA6IrD,SAASS,EAAsBhB,EAAKC,GAElC,OAAOjC,KAAKC,MAAMD,KAAKyF,UAAYxD,EAAMD,EAAM,GAAKA,GAGtD,SAASiD,EAAeS,EAAUC,GAChC,GAAID,EAASlG,SAAWmG,EAASnG,OAAQ,OAAO,EAChD,IAAK,IAAIW,EAAI,EAAGA,EAAIuF,EAASlG,OAAQW,IACnC,GAAIuF,EAASvF,KAAOwF,EAASxF,GAC3B,OAAO,EAGX,OAAO,EC7JMyF,MANf,WACE,OACE,kBAAC,EAAD,OCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.ee2f92eb.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  export function getBubbleSortAnimations(arr){\r\n    const animations = [];\r\n        const  n = arr.length; \r\n        for (let i = 0; i < n-1; i++) \r\n            for (let j = 0; j < n-i-1; j++) \r\n                if (arr[j] > arr[j+1]) \r\n                { \r\n                  animations.push([j,j+1]);\r\n                  animations.push([j,j+1]);\r\n                  animations.push([j,arr[j+1]]);\r\n                    // swap arr[j+1] and arr[i] \r\n                    let temp = arr[j]; \r\n                    arr[j] = arr[j+1]; \r\n                    arr[j+1] = temp; \r\n                    \r\n                  animations.push([j,j+1]);\r\n                  animations.push([j,j+1]);\r\n                  animations.push([j+1,temp]);\r\n                }\r\n          return animations; \r\n    }\r\n  \r\n    function partition(arr,low,high,quickanimations) \r\n    { \r\n        let pivot = arr[high];  \r\n        let i = (low-1); // index of smaller element \r\n        for (let j=low; j<high; j++) \r\n        { \r\n            // If current element is smaller than the pivot \r\n            if (arr[j] < pivot) \r\n            { \r\n                i++; \r\n                quickanimations.push([i,j]);\r\n                  quickanimations.push([j,i]);\r\n                  quickanimations.push([i,arr[j]]);\r\n                // swap arr[i] and arr[j] \r\n                let temp = arr[i]; \r\n                arr[i] = arr[j]; \r\n                arr[j] = temp; \r\n                quickanimations.push([i,j]);\r\n                  quickanimations.push([j,i]);\r\n                  quickanimations.push([j,temp]);\r\n            } \r\n        } \r\n  \r\n        // swap arr[i+1] and arr[high] (or pivot) \r\n                  quickanimations.push([i+1,high]);\r\n                  quickanimations.push([high,i+1]);\r\n                  quickanimations.push([i+1,arr[high]]);\r\n        let temp = arr[i+1]; \r\n        arr[i+1] = arr[high]; \r\n        arr[high] = temp; \r\n                  quickanimations.push([i+1,high]);\r\n                  quickanimations.push([high,i+1]);\r\n                  quickanimations.push([high,temp]);\r\n  \r\n        return i+1; \r\n    } \r\n  \r\n  \r\n    /* The main function that implements QuickSort() \r\n      arr[] --> Array to be sorted, \r\n      low  --> Starting index, \r\n      high  --> Ending index */\r\n    export function getQuickSortAnimations(arr,low ,high,quickanimations) \r\n    { \r\n        if (low < high) \r\n        { \r\n            /* pi is partitioning index, arr[pi] is  \r\n              now at right place */\r\n            let pi = partition(arr, low, high,quickanimations); \r\n  \r\n            // Recursively sort elements before \r\n            // partition and after partition \r\n            getQuickSortAnimations(arr, low, pi-1,quickanimations); \r\n            getQuickSortAnimations(arr, pi+1, high,quickanimations); \r\n        } \r\n        return quickanimations;\r\n    }\r\n  export  function getHeapSortAnimations(arr) \r\n    { let animations=[];\r\n        const n = arr.length; \r\n  \r\n        // Build heap (rearrange array) \r\n        for (let i = n / 2 - 1; i >= 0; i--) \r\n            heapify(arr, n, i,animations); \r\n  \r\n        // One by one extract an element from heap \r\n        for (let i=n-1; i>0; i--) \r\n        {    animations.push([0,i]);\r\n          animations.push([i,0]);\r\n          animations.push([0,arr[i]]);\r\n            // Move current root to end \r\n            let temp = arr[0]; \r\n            arr[0] = arr[i]; \r\n            arr[i] = temp; \r\n            animations.push([0,i]);\r\n          animations.push([i,0]);\r\n          animations.push([i,temp]);\r\n            // call max heapify on the reduced heap \r\n            heapify(arr, i, 0,animations); \r\n        } \r\n        console.log(animations);\r\n        return animations;\r\n    }   \r\n\r\n    function heapify(arr,n,i,animations) \r\n    { \r\n        let largest = i; // Initialize largest as root \r\n        let l = 2*i + 1; // left = 2*i + 1 \r\n        let r = 2*i + 2; // right = 2*i + 2 \r\n  \r\n        // If left child is larger than root \r\n        if (l < n && arr[l] > arr[largest]) \r\n            largest = l; \r\n  \r\n        // If right child is larger than largest so far \r\n        if (r < n && arr[r] > arr[largest]) \r\n            largest = r; \r\n  \r\n        // If largest is not root \r\n        if (largest !== i) \r\n        {   \r\n          animations.push([largest,i]);\r\n          animations.push([i,largest]);\r\n          animations.push([i,arr[largest]]);\r\n            let swap = arr[i]; \r\n            arr[i] = arr[largest]; \r\n            arr[largest] = swap; \r\n            animations.push([largest,i]);\r\n          animations.push([i,largest]);\r\n            animations.push([largest,swap]);\r\n            // Recursively heapify the affected sub-tree \r\n            heapify(arr, n, largest,animations); \r\n        } \r\n    } \r\n   export function getInsertionSortAnimations(arr){ \r\n     let animations=[];\r\n    const n = arr.length; \r\n    for (let i = 1; i < n; ++i) { \r\n        let key = arr[i]; \r\n        let j = i - 1; \r\n\r\n        /* Move elements of arr[0..i-1], that are \r\n           greater than key, to one position ahead \r\n           of their current position */\r\n        while (j >= 0 && arr[j] > key) { \r\n          animations.push([j,j+1]);\r\n          animations.push([j,j+1]);\r\n          animations.push([j+1,arr[j]]);\r\n            arr[j + 1] = arr[j]; \r\n            j = j - 1; \r\n        } \r\n        animations.push([j+1,i]);\r\n          animations.push([i,j+1]);\r\n          animations.push([j+1,key]);\r\n        arr[j + 1] = key; \r\n    }\r\n    return animations; \r\n} ","import React, { Component } from 'react';\r\nimport 'rc-slider/assets/index.css';\r\nimport \"./Navbar.css\";\r\nimport Slider from 'rc-slider';\r\n\r\nexport default class Navbar extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <header className=\"navbar\">\r\n                <h2>Sorting Algorithms Visualizer</h2>\r\n    \r\n                {/* <Slider className=\"slider\"/> */}\r\n                <div className=\"sorting-buttons\">\r\n                    <button onClick={this.props.mergeSort}>Merge Sort</button>\r\n                    <button onClick={this.props.quickSort}>Quick Sort</button>\r\n                    <button onClick={this.props.bubbleSort}>Bubble Sort</button>\r\n                    <button onClick={this.props.heapSort}>Heap Sort</button>\r\n                    <button onClick={this.props.insertionSort}>Insertion Sort</button>\r\n                </div>\r\n        <div style={{position:\"absolute\",display:\"inline-block\",color:\"white\",marginLeft:\"63%\",justifyContent:\"center\",marginTop:\"-2px\"}}>Array Size:{this.props.length}</div>\r\n                <div className=\"slider\">\r\n                 <Slider\r\n                defaultValue={310}\r\n                min={50}\r\n                max={300}\r\n                step={50}\r\n                onAfterChange={(level)=>this.props.handleChange(level)}\r\n              />\r\n            </div>\r\n                <button className=\"genbutton\" onClick={this.props.resetArray}>Generate New Array</button>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations,getBubbleSortAnimations,getQuickSortAnimations,getHeapSortAnimations,getInsertionSortAnimations} from './SortingAlgorithms.js';\r\nimport Navbar from \"./Navbar\";\r\nimport './SortingVisualizer.css';\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      min:5,\r\n      max:730,\r\n      length:300,\r\n      completed:false,\r\n      action:false,\r\n      width:2,\r\n      currwidth:2\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  \r\n  handleChange(currlength){\r\n    let currwidth=(300/currlength)*2;\r\n    this.setState({length:currlength,currwidth});\r\n  }\r\n  resetArray() {\r\n    this.setState({width:this.state.currwidth});\r\n    const array = [];\r\n    for (let i = 0; i < this.state.length; i++) {\r\n      array.push(randomIntFromInterval(this.state.min, this.state.max));\r\n    }\r\n    this.setState({array:array,completed:false,action:false});\r\n  \r\n  }\r\n  generateAnimation(animations,ANIMATION_SPEED_MS){\r\n    this.setState({action:true});\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS*2);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight*100/this.state.max}%`;\r\n           if (i===animations.length-1){\r\n             this.setState({completed:true});\r\n           } \r\n        }, i * ANIMATION_SPEED_MS*2);\r\n      }\r\n    }\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    this.generateAnimation(animations,1);\r\n  }\r\n\r\n  quickSort() {\r\n    let array=[];\r\n    const animations=getQuickSortAnimations(this.state.array,0,this.state.length-1,array);\r\n    this.generateAnimation(animations,1);\r\n  }\r\n\r\n  heapSort() {\r\n    const animations=getHeapSortAnimations(this.state.array);\r\n    this.generateAnimation(animations,1);\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    this.generateAnimation(animations,(300/this.state.length)*.2);\r\n  }\r\n  insertionSort(){\r\n    const animations=getInsertionSortAnimations(this.state.array);\r\n    this.generateAnimation(animations,(300/this.state.length)*.2);\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n  status(){\r\n    if(this.state.completed && this.state.action)\r\n      return <div className=\"action\" style={{color: \"green\"}}>Sorting Complete!!!!</div>;\r\n      else if(this.state.action)\r\n        return <p class=\"saving action\" style={{color:\"#34495e\"}}>Sorting in Progress<span>.</span><span>.</span><span>.</span></p>\r\n        ;\r\n      return ``;\r\n  }\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (<div className=\"root\">\r\n            <Navbar resetArray={()=>this.resetArray()}\r\n             mergeSort={() => this.mergeSort()}\r\n              bubbleSort={() => this.bubbleSort()}\r\n                quickSort={() => this.quickSort()}\r\n                 heapSort={() => this.heapSort()}\r\n                  insertionSort={()=>this.insertionSort()}\r\n                  handleChange={this.handleChange.bind(this)}\r\n                  length={this.state.length}/>\r\n            <div className=\"array-container\">\r\n            {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value* 100/this.state.max}%`,\r\n              width:`${this.state.width}px`\r\n            }}></div>\r\n        ))}\r\n        <div>{this.status()}</div>\r\n              </div>\r\n            </div>\r\n             \r\n    \r\n     \r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React from 'react';\nimport SortingVisualizer from \"./SortingVisualizer\";\nfunction App() {\n  return (\n    <SortingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}